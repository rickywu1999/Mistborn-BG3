local __util = require 'larian.util'

function MistbornSizeEqualOrGreater(size, entity)
    entity = entity or context.Target
    return ConditionResult(entity.Size ~= Size.None and entity.Size.value >= size.value,{ConditionError("SizeMustBeLarger")})
end

function MistbornSizeEqualOrSmaller(size, entity)
    entity = entity or context.Target
    return ConditionResult(entity.Size ~= Size.None and entity.Size.value <= size.value,{ConditionError("SizeMustBeSmaller")})
end

function MistbornIsMetal(entity)
    entity = entity or context.Target
    result = Tagged('METAL', entity) | HasMetalWeaponInAnyHand(entity) | HasMetalArmor(entity)
    return ConditionResult(result.Result, {ConditionError("DoesNotHaveMetal")})
end

function MistbornHasSpellSlots(entity)
    entity = entity or context.Target
    result = HasActionResource('SpellSlot', 1,1, false, false, entity) | HasActionResource('SpellSlot', 1,2, false, false, entity) | HasActionResource('SpellSlot', 1,3, false, false, entity) | HasActionResource('SpellSlot', 1,4, false, false, entity) | HasActionResource('SpellSlot', 1,5, false, false, entity) | HasActionResource('SpellSlot', 1,6, false, false, entity) | HasActionResource('SpellSlot', 1,7, false, false, entity) | HasActionResource('SpellSlot', 1,8, false, false, entity) | HasActionResource('SpellSlot', 1,9, false, false, entity)  
    return ConditionResult(result.Result, {ConditionError("MustHaveSpellSlots")})
end

function MistbornRecentlyCastedSpell()
    result = HasStatus('NICROSIL_ABJURATION') | HasStatus('NICROSIL_CONJURATION') | HasStatus('NICROSIL_DIVINATION') | HasStatus('NICROSIL_ENCHANTMENT') | HasStatus('NICROSIL_EVOCATION') | HasStatus('NICROSIL_ILLUSION') | HasStatus('NICROSIL_NECROMANCY') | HasStatus('NICROSIL_TRANSMUTATION')
    return ConditionResult(result.Result, {ConditionError("MustHaveRecentlyCastedSpell")})
end

function AttackAutoResolveOnAlly(attackType, result)
    result = result or false
    ally = Ally()
    if not ally.Result then
        st = Attack(attackType)
        return ConditionResult(st.Result,{},{},st.Chance)
    end
    return ConditionResult(result)
end

function MistbornCounterspell(level)
    local spellPowerLevel = SpellPowerLevelEqualOrLessThan(level)
    if not spellPowerLevel.Result then
        local counterspellDC = 10 + context.HitDescription.SpellPowerLevel
        local st = AbilityCheck(Ability.Wisdom, counterspellDC, false, false, 0, context.Observer, context.Observer)
        return ConditionResult(st.Result,{},{},st.Chance)
    end
    return ConditionResult(true,{},{},1.0)
end

function AdaptiveManeuversAbilities()
    return SpellId('Tineye_Bonus') 
    | SpellId('CoinShot_Bonus') 
    | SpellId('SteelShove_Bonus') 
    | SpellId('SteelJump_Bonus') 
    | SpellId('PewterEndurance_Bonus') 
    | SpellId('PewterEnhance_Bonus') 
    | SpellId('IronDisarm_Bonus') 
    | SpellId('IronRedirection_Bonus') 
    | SpellId('IronPull_Bonus') 
end

function MistbornIronAbilities()
    return SpellId('IronPull_Base') 
    | SpellId('IronPull_Enhance') 
    | SpellId('IronPull_Flare') 
    | SpellId('IronLurch_Base') 
    | SpellId('IronLurch_Enhance') 
    | SpellId('IronLurch_Flare') 
    | SpellId('IronRedirection') 
    | SpellId('IronDisarm') 
    | SpellId('Physical_Iron_Pull_Duralumin') 
    | SpellId('IronDisarm_Bonus') 
    | SpellId('IronRedirection_Bonus') 
    | SpellId('IronPull_Bonus')
end

function MistbornSteelAbilities()
    return SpellId('SteelShove_Base') 
    | SpellId('SteelShove_Enhance') 
    | SpellId('SteelShove_Flare') 
    | SpellId('SteelBoost_Base') 
    | SpellId('SteelBoost_Enhance') 
    | SpellId('SteelBoost_Flare') 
    | SpellId('CoinShot_Base') 
    | SpellId('CoinShot_Enhance') 
    | SpellId('CoinShot_Flare') 
    | SpellId('SteelJump') 
    | SpellId('Physical_Steel_Push_Duralumin') 
    | SpellId('Physical_Steel_CoinShot_Duralumin') 
    | SpellId('CoinShot_Bonus') 
    | SpellId('SteelShove_Bonus') 
    | SpellId('SteelJump_Bonus') 
end

function MistbornTinAbilities()
    return SpellId('Tineye_Base') 
    | SpellId('Tineye_Enhance') 
    | SpellId('Tineye_Flare') 
end

function MistbornPewterAbilities()
    return SpellId('PewterEnhance_Base') 
    | SpellId('PewterEnhance_Enhance') 
    | SpellId('PewterEnhance_Flare') 
    | SpellId('PewterArm') 
    | SpellId('PewterEndurance_Base') 
    | SpellId('PewterEndurance_Enhance') 
    | SpellId('PewterEndurance_Flare') 
end

function MistbornPhysicalAbilities()
    return MistbornIronAbilities() 
    | MistbornSteelAbilities() 
    | MistbornTinAbilities() 
    | MistbornPewterAbilities()
end

function MistbornPhysicalWeaponAbilities()
    return SpellId('CoinShot_Base') 
    | SpellId('CoinShot_Enhance') 
    | SpellId('CoinShot_Flare') 
    | SpellId('Physical_Steel_CoinShot_Duralumin') 
    | SpellId('CoinShot_Bonus') 
end

function MistbornMentalStatuses()
    return StatusId('CHARMED_BRASS')
    | StatusId('SOOTHEBRAVERY_BASE')
    | StatusId('SOOTHEBRAVERY_ENHANCE')
    | StatusId('SOOTHEBRAVERY_FLARE')
    | StatusId('FRIGHTENED_ZINC')
    | StatusId('RIOTSTRESS_BASE')
    | StatusId('RIOTSTRESS_ENHANCE')
    | StatusId('RIOTSTRESS_FLARE')
    | StatusId('RIOTANGER_BASE')
    | StatusId('RIOTANGER_ENHANCE')
    | StatusId('RIOTANGER_FLARE')
    | StatusId('MENTAL_DURALUMIN_EMOTIONLESS')
    | StatusId('FEARED_ZINC')
end

function MistbornHasMentalStatuses()
    return HasStatus('CHARMED_BRASS')
    | HasStatus('SOOTHEBRAVERY_BASE')
    | HasStatus('SOOTHEBRAVERY_ENHANCE')
    | HasStatus('SOOTHEBRAVERY_FLARE')
    | HasStatus('FRIGHTENED_ZINC')
    | HasStatus('RIOTSTRESS_BASE')
    | HasStatus('RIOTSTRESS_ENHANCE')
    | HasStatus('RIOTSTRESS_FLARE')
    | HasStatus('RIOTANGER_BASE')
    | HasStatus('RIOTANGER_ENHANCE')
    | HasStatus('RIOTANGER_FLARE')
    | HasStatus('MENTAL_DURALUMIN_EMOTIONLESS')
    | HasStatus('FEARED_ZINC')
end

function MBHumM()
    return Tagged('HUMAN',context.Source) & Tagged('MALE',context.Source)
end

function MBElfM()
    return Tagged('ELF',context.Source) & Tagged('MALE',context.Source)
end

function MBDrowM()
    return Tagged('DROWELF',context.Source) & Tagged('MALE',context.Source)
end

function MBDwarfM()
    return Tagged('DWARF',context.Source) & Tagged('MALE',context.Source)
end

function MBHalfM()
    return Tagged('HALFELF',context.Source) & Tagged('MALE',context.Source)
end

function MBGnomeM()
    return Tagged('GNOME',context.Source) & Tagged('MALE',context.Source)
end

function MBLingM()
    return Tagged('HALFLING',context.Source) & Tagged('MALE',context.Source)
end

function MBTiefM()
    return Tagged('TIEFLING',context.Source) & Tagged('MALE',context.Source)
end

function MBGithM()
    return Tagged('GITHYANKI',context.Source) & Tagged('MALE',context.Source)
end

function MBDragM()
    return Tagged('DRAGONBORN',context.Source) & Tagged('MALE',context.Source)
end

function MBOrcM()
    return Tagged('HALFORC',context.Source) & Tagged('MALE',context.Source)
end

function MBHumF()
    return Tagged('HUMAN',context.Source) & Tagged('FEMALE',context.Source)
end

function MBElfF()
    return Tagged('ELF',context.Source) & Tagged('FEMALE',context.Source)
end

function MBDrowF()
    return Tagged('DROWELF',context.Source) & Tagged('FEMALE',context.Source)
end

function MBDwarfF()
    return Tagged('DWARF',context.Source) & Tagged('FEMALE',context.Source)
end

function MBHalfF()
    return Tagged('HALFELF',context.Source) & Tagged('FEMALE',context.Source)
end

function MBGnomeF()
    return Tagged('GNOME',context.Source) & Tagged('FEMALE',context.Source)
end

function MBLingF()
    return Tagged('HALFLING',context.Source) & Tagged('FEMALE',context.Source)
end

function MBTiefF()
    return Tagged('TIEFLING',context.Source) & Tagged('FEMALE',context.Source)
end

function MBGithF()
    return Tagged('GITHYANKI',context.Source) & Tagged('FEMALE',context.Source)
end

function MBDragF()
    return Tagged('DRAGONBORN',context.Source) & Tagged('FEMALE',context.Source)
end

function MBOrcF()
    return Tagged('HALFORC',context.Source) & Tagged('FEMALE',context.Source)
end